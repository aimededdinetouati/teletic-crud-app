/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { assignTask } from '../fn/task-management/assign-task';
import { AssignTask$Params } from '../fn/task-management/assign-task';
import { createTask } from '../fn/task-management/create-task';
import { CreateTask$Params } from '../fn/task-management/create-task';
import { deleteTask } from '../fn/task-management/delete-task';
import { DeleteTask$Params } from '../fn/task-management/delete-task';
import { getAllTasks } from '../fn/task-management/get-all-tasks';
import { GetAllTasks$Params } from '../fn/task-management/get-all-tasks';
import { getTask } from '../fn/task-management/get-task';
import { GetTask$Params } from '../fn/task-management/get-task';
import { getUserTasks } from '../fn/task-management/get-user-tasks';
import { GetUserTasks$Params } from '../fn/task-management/get-user-tasks';
import { PageTaskDto } from '../models/page-task-dto';
import { TaskDto } from '../models/task-dto';
import { updateTask } from '../fn/task-management/update-task';
import { UpdateTask$Params } from '../fn/task-management/update-task';
import { updateTaskStatus } from '../fn/task-management/update-task-status';
import { UpdateTaskStatus$Params } from '../fn/task-management/update-task-status';

@Injectable({ providedIn: 'root' })
export class TaskManagementService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTask()` */
  static readonly GetTaskPath = '/tasks/{id}';

  /**
   * Get a specific task by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTask$Response(params: GetTask$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return getTask(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a specific task by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTask(params: GetTask$Params, context?: HttpContext): Observable<TaskDto> {
    return this.getTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `updateTask()` */
  static readonly UpdateTaskPath = '/tasks/{id}';

  /**
   * Update an existing task (admin only).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask$Response(params: UpdateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return updateTask(this.http, this.rootUrl, params, context);
  }

  /**
   * Update an existing task (admin only).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask(params: UpdateTask$Params, context?: HttpContext): Observable<TaskDto> {
    return this.updateTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `deleteTask()` */
  static readonly DeleteTaskPath = '/tasks/{id}';

  /**
   * Delete a task (admin only).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask$Response(params: DeleteTask$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTask(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a task (admin only).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask(params: DeleteTask$Params, context?: HttpContext): Observable<void> {
    return this.deleteTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllTasks()` */
  static readonly GetAllTasksPath = '/tasks';

  /**
   * Get all tasks (admin only).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTasks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTasks$Response(params: GetAllTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<PageTaskDto>> {
    return getAllTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all tasks (admin only).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTasks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTasks(params: GetAllTasks$Params, context?: HttpContext): Observable<PageTaskDto> {
    return this.getAllTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageTaskDto>): PageTaskDto => r.body)
    );
  }

  /** Path part for operation `createTask()` */
  static readonly CreateTaskPath = '/tasks';

  /**
   * Create a new task (admin only).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTask$Response(params: CreateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return createTask(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new task (admin only).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTask(params: CreateTask$Params, context?: HttpContext): Observable<TaskDto> {
    return this.createTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `updateTaskStatus()` */
  static readonly UpdateTaskStatusPath = '/tasks/{id}/status';

  /**
   * Update task status (available to both admin and assigned user).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTaskStatus()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaskStatus$Response(params: UpdateTaskStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return updateTaskStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Update task status (available to both admin and assigned user).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTaskStatus$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaskStatus(params: UpdateTaskStatus$Params, context?: HttpContext): Observable<TaskDto> {
    return this.updateTaskStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `assignTask()` */
  static readonly AssignTaskPath = '/tasks/{id}/assign';

  /**
   * Assign a task to a user (admin only).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  assignTask$Response(params: AssignTask$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return assignTask(this.http, this.rootUrl, params, context);
  }

  /**
   * Assign a task to a user (admin only).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  assignTask(params: AssignTask$Params, context?: HttpContext): Observable<TaskDto> {
    return this.assignTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `getUserTasks()` */
  static readonly GetUserTasksPath = '/tasks/my';

  /**
   * Get current user's tasks.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserTasks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserTasks$Response(params: GetUserTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<PageTaskDto>> {
    return getUserTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * Get current user's tasks.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserTasks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserTasks(params: GetUserTasks$Params, context?: HttpContext): Observable<PageTaskDto> {
    return this.getUserTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageTaskDto>): PageTaskDto => r.body)
    );
  }

}
